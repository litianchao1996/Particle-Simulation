{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "963690b2",
      "metadata": {
        "id": "963690b2"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vlamen/tue-deeplearning/blob/main/assignments/assignment_2_3/a3_skeleton.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "dde28458",
      "metadata": {
        "id": "dde28458"
      },
      "source": [
        "# Downloading Data and Preliminaries"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7d0580a5",
      "metadata": {
        "id": "7d0580a5"
      },
      "outputs": [],
      "source": [
        "import pickle\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib\n",
        "import numpy as np\n",
        "\n",
        "from zipfile import ZipFile\n",
        "import requests\n",
        "import io\n",
        "\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "from torch import optim"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8ce00edc",
      "metadata": {
        "id": "8ce00edc"
      },
      "outputs": [],
      "source": [
        "def load_zip(url):\n",
        "    response = requests.get(url)\n",
        "    response.raise_for_status()\n",
        "    zipf = ZipFile(io.BytesIO(response.content))\n",
        "    return {name: zipf.read(name) for name in zipf.namelist()}\n",
        "\n",
        "def load_pickle(zipfile, fn):\n",
        "    return pickle.load(io.BytesIO(zipfile[fn]))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bb77a4be",
      "metadata": {
        "id": "bb77a4be"
      },
      "outputs": [],
      "source": [
        "data = load_zip('https://surfdrive.surf.nl/files/index.php/s/cwqGaS22KXgnXtg/download')\n",
        "\n",
        "    \n",
        "\"\"\"\n",
        "simulation_{train, valid, test} is stored as a list of simulations. \n",
        "Each simulation is a numpy array of size (t, 2): For t timesteps an x and y coordinate of our particle.\n",
        "\"\"\"\n",
        "simulation_train = load_pickle(data, 'data/train/simulation.pickle')  # 3.1 + 3.2\n",
        "simulation_valid = load_pickle(data, 'data/valid/simulation.pickle')  # 3.1 + 3.2\n",
        "simulation_test = load_pickle(data, 'data/test/simulation.pickle')  # 3.1 + 3.2\n",
        "\n",
        "\"\"\"\n",
        "charges_{train, valid, test} is stored as a list of simulation-charges. \n",
        "These charges are stored as numpy arrays of size (3,): One value for each charge.\n",
        "\"\"\"\n",
        "charges_train = load_pickle(data, 'data/train/charges.pickle')  # 3.1\n",
        "charges_valid = load_pickle(data, 'data/valid/charges.pickle')  # 3.1\n",
        "charges_test = load_pickle(data, 'data/test/charges.pickle')  # 3.1\n",
        "\n",
        "\"\"\"\n",
        "simulation_continued_{train, valid, test} is stored as a list of simulations. \n",
        "Each simulation is a numpy array of size (t, 2): For t timesteps an x and y coordinate of our particle.\n",
        "\"\"\"\n",
        "simulation_continued_train = load_pickle(data, 'data/train/simulation_continued.pickle')  # 3.2\n",
        "simulation_continued_valid = load_pickle(data, 'data/valid/simulation_continued.pickle')  # 3.2\n",
        "simulation_continued_test = load_pickle(data, 'data/test/simulation_continued.pickle')  # 3.2\n",
        "\n",
        "\"\"\"\n",
        "Note that the indices are shared throughout the different lists, e.g., for the 4th training simulation:\n",
        "simulation_train[3] contains its initial simulation\n",
        "charges_train[3] contains the charges associated with the simulation\n",
        "simulation_continued_train[3] contains the continuation of the simulation \n",
        "                --> simulation_continued_train[3][0] is the state after simulation_train[3][-1]\n",
        "\"\"\"\n",
        "pass"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "10a3438a",
      "metadata": {
        "id": "10a3438a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "outputId": "31bc640b-afd7-415d-8e58-e5c9c1fec46e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overview of no. datapoints:\n",
            "\n",
            "Task 3.1:\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-133-d85ef16f98a0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Task 3.1:'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'{len(simulation_train)} train, {len(simulation_valid)} validation, {len(simulation_test)} test simulations'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'{len(charges_train)} train, {len(charges_valid)} validation, {len(charges_test)} test charge pairs'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: 'int' object is not callable"
          ]
        }
      ],
      "source": [
        "print('Overview of no. datapoints:\\n')\n",
        "\n",
        "print('Task 3.1:')\n",
        "print(f'{len(simulation_train)} train, {len(simulation_valid)} validation, {len(simulation_test)} test simulations')\n",
        "print(f'{len(charges_train)} train, {len(charges_valid)} validation, {len(charges_test)} test charge pairs')\n",
        "print()\n",
        "\n",
        "print('Task 3.2:')\n",
        "print('Since len(simulation_continued_train) < len(simulation_train), we can only use a subset of initial simulations')\n",
        "print('We cut simulation_train down to the first 150 samples in simulation_train_task32')\n",
        "simulation_train_task32 = simulation_train[:150]\n",
        "print(f'{len(simulation_train_task32)} train, {len(simulation_valid)} validation, {len(simulation_test)} test simulations')\n",
        "print(f'{len(simulation_continued_train)} train, {len(simulation_continued_valid)} validation, {len(simulation_continued_test)} test continuations')\n",
        "\n",
        "print(f\"\"\"\n",
        "For task 3.1, use:\n",
        "{chr(10).join([\"simulation_{} + charges_{}\".format(t, t) for t in [\"train\", \"valid\", \"test\"]])}\n",
        "\n",
        "For task 3.2, use:\n",
        "{chr(10).join([\"simulation_{} + simulation_continued_{}\".format(*((t[0], t[1]) if isinstance(t, tuple) else (t, t))) for t in [(\"train_task32\", \"train\"), \"valid\", \"test\"]])}\n",
        "\"\"\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3cfafdb3",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3cfafdb3",
        "outputId": "044a9591-1fb8-4ad6-a11d-f2d5dcb5aba5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Print some shapes:\n",
            "\n",
            "simulation_train[0].shape: (103, 2) -> (t, 2), (x, y) at every t)\n",
            "charges_train[0].shape: (3,) -> charges for the simulation\n",
            "simulation_continued_train[0].shape: (54, 2) -> (t, 2), (x, y) at every t)\n",
            "----\n",
            "\n",
            "simulation_train[1].shape: (97, 2) -> (t, 2), (x, y) at every t)\n",
            "charges_train[1].shape: (3,) -> charges for the simulation\n",
            "simulation_continued_train[1].shape: (45, 2) -> (t, 2), (x, y) at every t)\n",
            "----\n",
            "\n",
            "simulation_train[2].shape: (99, 2) -> (t, 2), (x, y) at every t)\n",
            "charges_train[2].shape: (3,) -> charges for the simulation\n",
            "simulation_continued_train[2].shape: (47, 2) -> (t, 2), (x, y) at every t)\n",
            "----\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print('Print some shapes:\\n')\n",
        "for i in range(3):\n",
        "    print('simulation_train[{}].shape:'.format(i), simulation_train[i].shape, '-> (t, 2), (x, y) at every t)')\n",
        "    print('charges_train[{}].shape:'.format(i), charges_train[i].shape, '-> charges for the simulation')\n",
        "    print('simulation_continued_train[{}].shape:'.format(i), simulation_continued_train[i].shape, '-> (t, 2), (x, y) at every t)')\n",
        "    print('----\\n')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f9106543",
      "metadata": {
        "id": "f9106543"
      },
      "outputs": [],
      "source": [
        "def plot_example(x, x_gt=None, x_pred=None, fn=None):\n",
        "    charge_locations = np.array([[-1.53846154, -1.53846154],\n",
        "                                 [ 1.53846154, -1.53846154],\n",
        "                                 [ 0.        ,  1.53846154]])  # charge locations are fixed\n",
        "    fig = plt.figure()\n",
        "    axes = plt.gca()\n",
        "    axes.set_xlim([-5., 5.])\n",
        "    axes.set_ylim([-5., 5.])\n",
        "    cmap = matplotlib.cm.get_cmap('tab20')\n",
        "    plt.plot(x[:, 0], x[:, 1], color=cmap(0))\n",
        "    plt.plot(x[0, 0], x[0, 1], 'd', color=cmap(1))\n",
        "    fig.set_size_inches(5, 5)\n",
        "    for charge in charge_locations:\n",
        "        plt.plot(charge[0], charge[1], 'd', color='black')\n",
        "    if x_gt is not None:\n",
        "        plt.plot(x_gt[:, 0], x_gt[:, 1], color='red', linewidth=.5)\n",
        "    if x_pred is not None:\n",
        "        plt.plot(x_pred[:, 0], x_pred[:, 1], color='green', linestyle='--')\n",
        "    if fn is None:\n",
        "        plt.show()\n",
        "    else:\n",
        "        plt.savefig(fn)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d28681a6",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 337
        },
        "id": "d28681a6",
        "outputId": "73991a33-83e5-4441-a102-640486bb30bf"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Charges are [-0.89292929 -0.89537468 -0.87927981]\n"
          ]
        }
      ],
      "source": [
        "test_idx = np.random.randint(150)\n",
        "plot_example(simulation_train[test_idx], simulation_continued_train[test_idx])\n",
        "print(f'Charges are {charges_train[test_idx]}')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "883762b1",
      "metadata": {
        "id": "883762b1"
      },
      "source": [
        "# Task 3.1"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4c1ddabe",
      "metadata": {
        "id": "4c1ddabe"
      },
      "source": [
        "## Data Handling and Preprocessing"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bd9df856",
      "metadata": {
        "id": "bd9df856"
      },
      "outputs": [],
      "source": [
        "#todo\n",
        "from torchvision import transforms\n",
        "from torch.utils.data import Dataset, DataLoader,TensorDataset\n",
        "from PIL import Image\n",
        "from torch.nn.utils.rnn import pad_sequence"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def data_padding(dataset):\n",
        "  return pad_sequence([torch.from_numpy(x) for x in dataset],batch_first=True)\n",
        "\n",
        "def data_loader(dataset, batch_size, shuffle=False):\n",
        "  return DataLoader(dataset, batch_size, shuffle=shuffle)"
      ],
      "metadata": {
        "id": "ghJe89uzHGz2"
      },
      "id": "ghJe89uzHGz2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_padding = data_padding(simulation_train)\n",
        "valid_padding = data_padding(simulation_valid)\n",
        "test_padding = data_padding(simulation_test)\n",
        "train_label = charges_train\n",
        "valid_label = charges_valid\n",
        "test_label = charges_test"
      ],
      "metadata": {
        "id": "V1QAa1oBHmQi"
      },
      "id": "V1QAa1oBHmQi",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7dd9b7c1",
      "metadata": {
        "id": "7dd9b7c1"
      },
      "outputs": [],
      "source": [
        "class Dataset(Dataset):\n",
        "    def __init__(self, data, targets):\n",
        "        self.data = torch.tensor(data).float()\n",
        "        self.targets = torch.tensor(targets).float()\n",
        "           \n",
        "    def __len__(self):\n",
        "        return len(self.data)\n",
        "        \n",
        "    def __getitem__(self, index):  # get the label and data by index\n",
        "        x = self.data[index]\n",
        "        y = self.targets[index]\n",
        "        return x, y\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_dataset = Dataset(train_padding, train_label)\n",
        "valid_dataset = Dataset(valid_padding, valid_label)\n",
        "test_dataset = Dataset(test_padding, test_label)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MbmAuySDG6EQ",
        "outputId": "e9e82d95-fa82-4877-8526-ccb396d9bd7a"
      },
      "id": "MbmAuySDG6EQ",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:3: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  ../torch/csrc/utils/tensor_new.cpp:210.)\n",
            "  after removing the cwd from sys.path.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "cc8853f6",
      "metadata": {
        "id": "cc8853f6"
      },
      "source": [
        "## Model Implementation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8794a0cf",
      "metadata": {
        "id": "8794a0cf"
      },
      "outputs": [],
      "source": [
        "#todo\n",
        "import torch\n",
        "from torch import nn\n",
        "import torch.nn.functional as F\n",
        "from torch.autograd import Variable\n",
        "Batchsize = 1\n",
        "input_dim=2\n",
        "hidden_dim = 256\n",
        "n_layers=2\n",
        "output_dim=3 #output thress charges\n",
        "drop_prob=0.5\n",
        "lr=0.001\n",
        "num_epochs = 50\n",
        "\n",
        "if torch.cuda.is_available():\n",
        "    device = torch.device('cuda')\n",
        "else:\n",
        "    device=torch.device('cpu')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d62b5aa6",
      "metadata": {
        "id": "d62b5aa6"
      },
      "outputs": [],
      "source": [
        "class RNNChargePrediction(nn.Module):\n",
        "    \n",
        "    def __init__(self, n_input=input_dim, n_hidden=hidden_dim, num_layers=n_layers, n_output=output_dim, drop_prob=drop_prob, lr = lr):\n",
        "        super(RNNChargePrediction, self).__init__()\n",
        "        \n",
        "        self.num_layers = num_layers\n",
        "        self.n_hidden = n_hidden\n",
        "        self.drop_prob = drop_prob\n",
        "        self.n_input = n_input\n",
        "        self.n_output = output_dim\n",
        "        \n",
        "        self.lstm = nn.LSTM(input_size=n_input, hidden_size=n_hidden, num_layers=num_layers, dropout=self.drop_prob)\n",
        "        self.fc1 = nn.Linear(n_hidden, n_hidden)\n",
        "        self.fc2 = nn.Linear(n_hidden, n_output)\n",
        "        #self.fc1 = nn.Linear(n_hidden, n_output)\n",
        "        self.drop = nn.Dropout(drop_prob)\n",
        "       \n",
        "    def forward(self, x):\n",
        "        # Set initial hidden and cell states \n",
        "        # By default,PyTorch's LSTM initiates hidden state and cell state of zeros\n",
        "        # x.shape == (100, 220)      \n",
        "        \n",
        "        # Forward propagate LSTM\n",
        "        #out, _ = self.lstm(x, (h0, c0)) \n",
        "        out, _ = self.lstm(x) \n",
        "\n",
        "        # retrieve final hidden output of last timestep for each sequence\n",
        "        # shape [batch_size, hidden_dim]\n",
        "        last_timestep = out[:,-1] \n",
        "\n",
        "        #apply dropout\n",
        "        last_timestep = self.drop(last_timestep)\n",
        "        #y_pred = self.fc1(last_timestep)\n",
        "        # feed lstm output to MLP, apply ReLU nonlinearity\n",
        "        # shape [batch_size, hidden_dim]\n",
        "        h = self.drop(self.fc1(last_timestep))\n",
        "        h = nn.ReLU()(h)\n",
        "        \n",
        "        # Decode the hidden state of the last time step\n",
        "        # shape [batch_size, num_classes]\n",
        "        y_pred = self.fc2(h)\n",
        "        return y_pred"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class RNNChargePrediction1(nn.Module):\n",
        "    \n",
        "    def __init__(self, n_input=input_dim, n_hidden=hidden_dim, num_layers=n_layers, n_output=output_dim, drop_prob=drop_prob, lr = lr):\n",
        "        super(RNNChargePrediction, self).__init__()\n",
        "        \n",
        "        self.num_layers = num_layers\n",
        "        self.n_hidden = n_hidden\n",
        "        self.drop_prob = drop_prob\n",
        "        self.n_input = n_input\n",
        "        self.n_output = output_dim\n",
        "        \n",
        "        self.lstm = nn.LSTM(input_size=n_input, hidden_size=n_hidden, num_layers=num_layers, dropout=self.drop_prob)\n",
        "        #self.fc1 = nn.Linear(n_hidden, n_hidden)\n",
        "        #self.fc2 = nn.Linear(n_hidden, n_output)\n",
        "        self.fc1 = nn.Linear(n_hidden, n_output)\n",
        "        self.drop = nn.Dropout(drop_prob)\n",
        "       \n",
        "    def forward(self, x):\n",
        "        # Set initial hidden and cell states \n",
        "        # By default,PyTorch's LSTM initiates hidden state and cell state of zeros\n",
        "        # x.shape == (100, 220)      \n",
        "        \n",
        "        # Forward propagate LSTM\n",
        "        #out, _ = self.lstm(x, (h0, c0)) \n",
        "        out, _ = self.lstm(x) \n",
        "\n",
        "        # retrieve final hidden output of last timestep for each sequence\n",
        "        # shape [batch_size, hidden_dim]\n",
        "        last_timestep = out[:,-1] \n",
        "\n",
        "        #apply dropout\n",
        "        last_timestep = self.drop(last_timestep)\n",
        "        #y_pred = self.fc1(last_timestep)\n",
        "        # feed lstm output to MLP, apply ReLU nonlinearity\n",
        "        # shape [batch_size, hidden_dim]\n",
        "        h = self.fc1(last_timestep)\n",
        "        #h = nn.ReLU()(h)\n",
        "        \n",
        "        # Decode the hidden state of the last time step\n",
        "        # shape [batch_size, num_classes]\n",
        "        y_pred = h\n",
        "        return y_pred"
      ],
      "metadata": {
        "id": "LUiM_n8hkrUX"
      },
      "id": "LUiM_n8hkrUX",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class RNNChargePrediction2(nn.Module):\n",
        "    \n",
        "    def __init__(self, n_input=input_dim, n_hidden=hidden_dim, num_layers=1, n_output=output_dim, drop_prob=drop_prob, lr = lr):\n",
        "        super(RNNChargePrediction, self).__init__()\n",
        "        \n",
        "        self.num_layers = num_layers\n",
        "        self.n_hidden = n_hidden\n",
        "        self.drop_prob = drop_prob\n",
        "        self.n_input = n_input\n",
        "        self.n_output = output_dim\n",
        "        \n",
        "        self.lstm = nn.LSTM(input_size=n_input, hidden_size=n_hidden, num_layers=num_layers, dropout=self.drop_prob)\n",
        "        self.fc1 = nn.Linear(n_hidden, n_hidden)\n",
        "        self.fc2 = nn.Linear(n_hidden, n_output)\n",
        "        #self.fc1 = nn.Linear(n_hidden, n_output)\n",
        "        self.drop = nn.Dropout(drop_prob)\n",
        "       \n",
        "    def forward(self, x):\n",
        "        # Set initial hidden and cell states \n",
        "        # By default,PyTorch's LSTM initiates hidden state and cell state of zeros\n",
        "        # x.shape == (100, 220)      \n",
        "        \n",
        "        # Forward propagate LSTM\n",
        "        #out, _ = self.lstm(x, (h0, c0)) \n",
        "        out, _ = self.lstm(x) \n",
        "\n",
        "        # retrieve final hidden output of last timestep for each sequence\n",
        "        # shape [batch_size, hidden_dim]\n",
        "        last_timestep = out[:,-1] \n",
        "\n",
        "        #apply dropout\n",
        "        last_timestep = self.drop(last_timestep)\n",
        "        #y_pred = self.fc1(last_timestep)\n",
        "        # feed lstm output to MLP, apply ReLU nonlinearity\n",
        "        # shape [batch_size, hidden_dim]\n",
        "        h = self.drop(self.fc1(last_timestep))\n",
        "        h = nn.ReLU()(h)\n",
        "        \n",
        "        # Decode the hidden state of the last time step\n",
        "        # shape [batch_size, num_classes]\n",
        "        y_pred = self.fc2(h)\n",
        "        return y_pred"
      ],
      "metadata": {
        "id": "QAUZSKsMlGcq"
      },
      "id": "QAUZSKsMlGcq",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "id": "0e443b7f",
      "metadata": {
        "id": "0e443b7f"
      },
      "source": [
        "## Model Training"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5a5b0aca",
      "metadata": {
        "id": "5a5b0aca"
      },
      "outputs": [],
      "source": [
        "#todo"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "58348edd",
      "metadata": {
        "id": "58348edd"
      },
      "outputs": [],
      "source": [
        "def train(model, num_epochs, loss_fuc, Batchsize):\n",
        "    train_loader = data_loader(train_dataset, Batchsize, shuffle=True)\n",
        "    valid_loader = data_loader(valid_dataset, Batchsize, shuffle=True)\n",
        "    \"\"\"\n",
        "    Train the model.\n",
        "    \"\"\"\n",
        "    train_losses = []\n",
        "    val_losses = []\n",
        "    train_accuary = []\n",
        "    val_accuary = []\n",
        "    for epoch in range(num_epochs):\n",
        "        running_loss = 0.0\n",
        "        train_acc = 0.0\n",
        "        train_count = 0\n",
        "        model.train()\n",
        "        print(\"Starting epoch \" + str(epoch+1))\n",
        "        for (features, labels) in train_loader:\n",
        "            # Forward\n",
        "            (features, labels) = (features.to(device), labels.to(device))\n",
        "            pred = model(features)\n",
        "            loss = loss_fuc(pred, labels)\n",
        "            # Backward and optimize\n",
        "            optimizer.zero_grad()\n",
        "            loss.backward()\n",
        "            torch.nn.utils.clip_grad_norm_(model.parameters(), 0.1)\n",
        "            optimizer.step()\n",
        "            running_loss += loss.item()\n",
        "            train_acc += (labels == pred).sum().item()\n",
        "            train_count += labels.size(0)\n",
        "        avg_train_loss = running_loss / len(train_loader)\n",
        "        avg_train_acc = train_acc/train_count\n",
        "        train_losses.append(avg_train_loss)\n",
        "        train_accuary.append(avg_train_acc)\n",
        "\n",
        "        val_running_loss = 0.0\n",
        "        valid_acc = 0.0\n",
        "        valid_count = 0\n",
        "        # check validation loss after every epoch\n",
        "        with torch.no_grad():\n",
        "            model.eval()\n",
        "            for (features, labels) in valid_loader:\n",
        "                (features, labels) = (features.to(device), labels.to(device))\n",
        "                pred = model(features)\n",
        "                loss = loss_fuc(pred, labels)\n",
        "                val_running_loss += loss.item()\n",
        "                valid_acc += (labels == pred).sum().item()\n",
        "                valid_count += labels.size(0)\n",
        "        avg_val_loss = val_running_loss / len(valid_loader)\n",
        "        avg_val_acc = valid_acc/valid_count\n",
        "        val_losses.append(avg_val_loss)\n",
        "        val_accuary.append(avg_val_acc)\n",
        "\n",
        "        print('Epoch [{}/{}],Train Loss: {:.4f}, Train Accuary: {:.4f}, Valid Loss: {:.4f}, Valid Accuary: {:.4f}'\n",
        "              .format(epoch+1, num_epochs, avg_train_loss, avg_train_acc, avg_val_loss, avg_val_acc))\n",
        "    print(\"Finished Training\")\n",
        "    return train_losses, val_losses, train_accuary, val_accuary\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "176b3ea3",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "176b3ea3",
        "outputId": "daa95149-4743-4aef-ac3a-dd62149fa1cf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Starting epoch 1\n",
            "Epoch [1/50],Train Loss: 0.1693, Train Accuary: 0.0000, Valid Loss: 0.1167, Valid Accuary: 0.0000\n",
            "Starting epoch 2\n",
            "Epoch [2/50],Train Loss: 0.0909, Train Accuary: 0.0000, Valid Loss: 0.0945, Valid Accuary: 0.0000\n",
            "Starting epoch 3\n",
            "Epoch [3/50],Train Loss: 0.0835, Train Accuary: 0.0000, Valid Loss: 0.0921, Valid Accuary: 0.0000\n",
            "Starting epoch 4\n",
            "Epoch [4/50],Train Loss: 0.0825, Train Accuary: 0.0000, Valid Loss: 0.0918, Valid Accuary: 0.0000\n",
            "Starting epoch 5\n",
            "Epoch [5/50],Train Loss: 0.0829, Train Accuary: 0.0000, Valid Loss: 0.0920, Valid Accuary: 0.0000\n",
            "Starting epoch 6\n",
            "Epoch [6/50],Train Loss: 0.0826, Train Accuary: 0.0000, Valid Loss: 0.0918, Valid Accuary: 0.0000\n",
            "Starting epoch 7\n",
            "Epoch [7/50],Train Loss: 0.0826, Train Accuary: 0.0000, Valid Loss: 0.0920, Valid Accuary: 0.0000\n",
            "Starting epoch 8\n",
            "Epoch [8/50],Train Loss: 0.0826, Train Accuary: 0.0000, Valid Loss: 0.0915, Valid Accuary: 0.0000\n",
            "Starting epoch 9\n",
            "Epoch [9/50],Train Loss: 0.0826, Train Accuary: 0.0000, Valid Loss: 0.0913, Valid Accuary: 0.0000\n",
            "Starting epoch 10\n",
            "Epoch [10/50],Train Loss: 0.0832, Train Accuary: 0.0000, Valid Loss: 0.0918, Valid Accuary: 0.0000\n",
            "Starting epoch 11\n",
            "Epoch [11/50],Train Loss: 0.0831, Train Accuary: 0.0000, Valid Loss: 0.0921, Valid Accuary: 0.0000\n",
            "Starting epoch 12\n",
            "Epoch [12/50],Train Loss: 0.0828, Train Accuary: 0.0000, Valid Loss: 0.0917, Valid Accuary: 0.0000\n",
            "Starting epoch 13\n",
            "Epoch [13/50],Train Loss: 0.0829, Train Accuary: 0.0000, Valid Loss: 0.0921, Valid Accuary: 0.0000\n",
            "Starting epoch 14\n",
            "Epoch [14/50],Train Loss: 0.0828, Train Accuary: 0.0000, Valid Loss: 0.0918, Valid Accuary: 0.0000\n",
            "Starting epoch 15\n",
            "Epoch [15/50],Train Loss: 0.0826, Train Accuary: 0.0000, Valid Loss: 0.0920, Valid Accuary: 0.0000\n",
            "Starting epoch 16\n",
            "Epoch [16/50],Train Loss: 0.0826, Train Accuary: 0.0000, Valid Loss: 0.0917, Valid Accuary: 0.0000\n",
            "Starting epoch 17\n",
            "Epoch [17/50],Train Loss: 0.0830, Train Accuary: 0.0000, Valid Loss: 0.0921, Valid Accuary: 0.0000\n",
            "Starting epoch 18\n",
            "Epoch [18/50],Train Loss: 0.0828, Train Accuary: 0.0000, Valid Loss: 0.0914, Valid Accuary: 0.0000\n",
            "Starting epoch 19\n",
            "Epoch [19/50],Train Loss: 0.0832, Train Accuary: 0.0000, Valid Loss: 0.0918, Valid Accuary: 0.0000\n",
            "Starting epoch 20\n",
            "Epoch [20/50],Train Loss: 0.0827, Train Accuary: 0.0000, Valid Loss: 0.0921, Valid Accuary: 0.0000\n",
            "Starting epoch 21\n",
            "Epoch [21/50],Train Loss: 0.0825, Train Accuary: 0.0000, Valid Loss: 0.0921, Valid Accuary: 0.0000\n",
            "Starting epoch 22\n",
            "Epoch [22/50],Train Loss: 0.0825, Train Accuary: 0.0000, Valid Loss: 0.0915, Valid Accuary: 0.0000\n",
            "Starting epoch 23\n",
            "Epoch [23/50],Train Loss: 0.0831, Train Accuary: 0.0000, Valid Loss: 0.0919, Valid Accuary: 0.0000\n",
            "Starting epoch 24\n",
            "Epoch [24/50],Train Loss: 0.0832, Train Accuary: 0.0000, Valid Loss: 0.0921, Valid Accuary: 0.0000\n",
            "Starting epoch 25\n",
            "Epoch [25/50],Train Loss: 0.0827, Train Accuary: 0.0000, Valid Loss: 0.0921, Valid Accuary: 0.0000\n",
            "Starting epoch 26\n",
            "Epoch [26/50],Train Loss: 0.0828, Train Accuary: 0.0000, Valid Loss: 0.0915, Valid Accuary: 0.0000\n",
            "Starting epoch 27\n",
            "Epoch [27/50],Train Loss: 0.0827, Train Accuary: 0.0000, Valid Loss: 0.0917, Valid Accuary: 0.0000\n",
            "Starting epoch 28\n",
            "Epoch [28/50],Train Loss: 0.0828, Train Accuary: 0.0000, Valid Loss: 0.0917, Valid Accuary: 0.0000\n",
            "Starting epoch 29\n",
            "Epoch [29/50],Train Loss: 0.0828, Train Accuary: 0.0000, Valid Loss: 0.0923, Valid Accuary: 0.0000\n",
            "Starting epoch 30\n",
            "Epoch [30/50],Train Loss: 0.0827, Train Accuary: 0.0000, Valid Loss: 0.0918, Valid Accuary: 0.0000\n",
            "Starting epoch 31\n",
            "Epoch [31/50],Train Loss: 0.0828, Train Accuary: 0.0000, Valid Loss: 0.0915, Valid Accuary: 0.0000\n",
            "Starting epoch 32\n",
            "Epoch [32/50],Train Loss: 0.0824, Train Accuary: 0.0000, Valid Loss: 0.0916, Valid Accuary: 0.0000\n",
            "Starting epoch 33\n",
            "Epoch [33/50],Train Loss: 0.0829, Train Accuary: 0.0000, Valid Loss: 0.0920, Valid Accuary: 0.0000\n",
            "Starting epoch 34\n",
            "Epoch [34/50],Train Loss: 0.0825, Train Accuary: 0.0000, Valid Loss: 0.0917, Valid Accuary: 0.0000\n",
            "Starting epoch 35\n",
            "Epoch [35/50],Train Loss: 0.0824, Train Accuary: 0.0000, Valid Loss: 0.0920, Valid Accuary: 0.0000\n",
            "Starting epoch 36\n",
            "Epoch [36/50],Train Loss: 0.0830, Train Accuary: 0.0000, Valid Loss: 0.0919, Valid Accuary: 0.0000\n",
            "Starting epoch 37\n",
            "Epoch [37/50],Train Loss: 0.0827, Train Accuary: 0.0000, Valid Loss: 0.0919, Valid Accuary: 0.0000\n",
            "Starting epoch 38\n",
            "Epoch [38/50],Train Loss: 0.0825, Train Accuary: 0.0000, Valid Loss: 0.0915, Valid Accuary: 0.0000\n",
            "Starting epoch 39\n",
            "Epoch [39/50],Train Loss: 0.0827, Train Accuary: 0.0000, Valid Loss: 0.0916, Valid Accuary: 0.0000\n",
            "Starting epoch 40\n",
            "Epoch [40/50],Train Loss: 0.0832, Train Accuary: 0.0000, Valid Loss: 0.0912, Valid Accuary: 0.0000\n",
            "Starting epoch 41\n",
            "Epoch [41/50],Train Loss: 0.0826, Train Accuary: 0.0000, Valid Loss: 0.0917, Valid Accuary: 0.0000\n",
            "Starting epoch 42\n",
            "Epoch [42/50],Train Loss: 0.0825, Train Accuary: 0.0000, Valid Loss: 0.0917, Valid Accuary: 0.0000\n",
            "Starting epoch 43\n",
            "Epoch [43/50],Train Loss: 0.0825, Train Accuary: 0.0000, Valid Loss: 0.0916, Valid Accuary: 0.0000\n",
            "Starting epoch 44\n",
            "Epoch [44/50],Train Loss: 0.0823, Train Accuary: 0.0000, Valid Loss: 0.0918, Valid Accuary: 0.0000\n",
            "Starting epoch 45\n",
            "Epoch [45/50],Train Loss: 0.0826, Train Accuary: 0.0000, Valid Loss: 0.0919, Valid Accuary: 0.0000\n",
            "Starting epoch 46\n",
            "Epoch [46/50],Train Loss: 0.0828, Train Accuary: 0.0000, Valid Loss: 0.0919, Valid Accuary: 0.0000\n",
            "Starting epoch 47\n",
            "Epoch [47/50],Train Loss: 0.0829, Train Accuary: 0.0000, Valid Loss: 0.0919, Valid Accuary: 0.0000\n",
            "Starting epoch 48\n",
            "Epoch [48/50],Train Loss: 0.0827, Train Accuary: 0.0000, Valid Loss: 0.0918, Valid Accuary: 0.0000\n",
            "Starting epoch 49\n",
            "Epoch [49/50],Train Loss: 0.0830, Train Accuary: 0.0000, Valid Loss: 0.0918, Valid Accuary: 0.0000\n",
            "Starting epoch 50\n",
            "Epoch [50/50],Train Loss: 0.0830, Train Accuary: 0.0000, Valid Loss: 0.0919, Valid Accuary: 0.0000\n",
            "Finished Training\n"
          ]
        }
      ],
      "source": [
        "model= RNNChargePrediction().to(device)\n",
        "optimizer = torch.optim.SGD(model.parameters(), lr=lr, momentum=0.9)\n",
        "criterion = nn.MSELoss()\n",
        "train_losses, val_losses, train_accuary, val_accuary = train(model=model,num_epochs=num_epochs,loss_fuc = criterion, Batchsize=Batchsize)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "cf8d747c",
      "metadata": {
        "id": "cf8d747c"
      },
      "outputs": [],
      "source": [
        "def plot_loss(train_loss, val_loss,epoche):\n",
        "    \"\"\"\n",
        "    plot the loss change during the training precedure\n",
        "    \"\"\"\n",
        "    plt.title(\"Train and validation loss\")\n",
        "    plt.xlabel(\"epoch\")\n",
        "    plt.ylabel(\"loss\")\n",
        "    epoche_range=[i+1 for i in range(epoche)]\n",
        "    plt.plot(epoche_range, train_loss)\n",
        "    plt.plot(epoche_range, val_loss)\n",
        "    plt.legend(['train loss', 'validation loss'], loc='best')\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4a007157",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "4a007157",
        "outputId": "ce13141c-7e8b-403d-819b-04efedb64755"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plot_loss(train_loss=train_losses,val_loss=val_losses,epoche=num_epochs)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "da139d5b",
      "metadata": {
        "id": "da139d5b"
      },
      "source": [
        "## Evaluation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ebed03ba",
      "metadata": {
        "id": "ebed03ba"
      },
      "outputs": [],
      "source": [
        "#todo"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "43a3422e",
      "metadata": {
        "id": "43a3422e"
      },
      "outputs": [],
      "source": [
        "## margin of error ##\n",
        "## purpose: for defining the correctness of the model prediction, \n",
        "## i.e. the distance between actual particle position and predicted particle position should be less than this margin \n",
        "\n",
        "deltas = [0.2, 0.4, 0.6, 0.8, 1, 1.2]"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def test(model, test_dataset, delta, loss_func):\n",
        "  model.to(device)\n",
        "  test_loader = data_loader(test_dataset, Batchsize)\n",
        "  test_running_loss = 0.0\n",
        "  l1_test_acc = 0.0\n",
        "  l_inf_test_acc = 0.0\n",
        "  test_count = 0\n",
        "\n",
        "  with torch.no_grad():    \n",
        "    for (features, labels) in test_loader:\n",
        "    #for (feature, label) in test_dataset:\n",
        "      (features, labels) = (features.to(device), labels.to(device))\n",
        "      pred = model(features)\n",
        "      #pred = model(feature)\n",
        "      loss = loss_func(pred, labels)\n",
        "      test_running_loss += loss\n",
        "      l1_test_acc += l1_correct_count(pred, labels, delta)\n",
        "      l_inf_test_acc +=l_inf_correct_count(pred, labels, delta)\n",
        "      test_count += labels.size(0)\n",
        "    avg_val_loss = test_running_loss / len(test_loader)\n",
        "    l1_avg_val_acc = l1_test_acc/test_count\n",
        "    l_inf_avg_val_acc = l_inf_test_acc/test_count\n",
        "\n",
        "  print('Margin: {}, Test Loss: {:.4f}, L1 Test Margin Accuary: {:.4f}, L-Infinity Test Margin Accuary: {:.4f}'.format(delta, avg_val_loss, l1_avg_val_acc, l_inf_avg_val_acc))\n",
        "\n",
        "def l1_correct_count(pred, labels, delta):\n",
        "  diff = torch.sum(abs(labels-pred), dim = 1)\n",
        "  count = 0.0\n",
        "  for item in diff:\n",
        "    if item <= delta:\n",
        "      count += 1\n",
        "  \n",
        "  return count\n",
        "\n",
        "def l_inf_correct_count(pred, labels, delta):\n",
        "  diff, _ = torch.max(abs(labels-pred), dim = 1)\n",
        "  count = 0.0\n",
        "  for item in diff:\n",
        "    if item <= delta:\n",
        "      count += 1\n",
        "  \n",
        "  return count"
      ],
      "metadata": {
        "id": "0iEDsdSxFgg5"
      },
      "id": "0iEDsdSxFgg5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for delta in deltas:\n",
        "  test(model, test_dataset, delta, criterion)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZNL_h6Eim11C",
        "outputId": "7e1c88cd-ea6b-472c-cd1b-31d434eaea29"
      },
      "id": "ZNL_h6Eim11C",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Margin: 0.2, Test Loss: 0.0873, L1 Test Margin Accuary: 0.0300, L-Infinity Test Margin Accuary: 0.0900\n",
            "Margin: 0.4, Test Loss: 0.0873, L1 Test Margin Accuary: 0.1100, L-Infinity Test Margin Accuary: 0.5100\n",
            "Margin: 0.6, Test Loss: 0.0873, L1 Test Margin Accuary: 0.3100, L-Infinity Test Margin Accuary: 1.0000\n",
            "Margin: 0.8, Test Loss: 0.0873, L1 Test Margin Accuary: 0.5500, L-Infinity Test Margin Accuary: 1.0000\n",
            "Margin: 1, Test Loss: 0.0873, L1 Test Margin Accuary: 0.7200, L-Infinity Test Margin Accuary: 1.0000\n",
            "Margin: 1.2, Test Loss: 0.0873, L1 Test Margin Accuary: 0.9300, L-Infinity Test Margin Accuary: 1.0000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9a59808b",
      "metadata": {
        "id": "9a59808b"
      },
      "source": [
        "# Task 3.2"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f64a855d",
      "metadata": {
        "id": "f64a855d"
      },
      "source": [
        "## Data Handling and Preprocessing"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5b935865",
      "metadata": {
        "id": "5b935865"
      },
      "outputs": [],
      "source": [
        "#todo"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0ec19a8d",
      "metadata": {
        "id": "0ec19a8d"
      },
      "outputs": [],
      "source": [
        "train_feature_2 = data_padding(simulation_train_task32)\n",
        "valid_feature_2 = valid_padding\n",
        "test_feature_2 = test_padding"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8f189d19",
      "metadata": {
        "id": "8f189d19"
      },
      "outputs": [],
      "source": [
        "def padding_masking(dataset):\n",
        "    x_list = []\n",
        "    y_list = []\n",
        "    mask_last = []\n",
        "\n",
        "    for i in range(len(dataset)):\n",
        "      x = dataset[i][:,0]\n",
        "      x_list.append(x)\n",
        "      y = dataset[i][:,1]\n",
        "      y_list.append(y)\n",
        "      mask_last.append(len(x))\n",
        "\n",
        "    x_padding=pad_sequence([torch.from_numpy(i) for i in x_list]).transpose(0,1).float()\n",
        "    y_padding=pad_sequence([torch.from_numpy(i) for i in x_list]).transpose(0,1).float()\n",
        "    max_len = len(x_padding[0])\n",
        "\n",
        "    data_padding = torch.cat((x_padding,y_padding),1)\n",
        "    masking = torch.tensor(create_masking(mask_last,max_len)).float()\n",
        "    return torch.stack([data_padding, masking],dim=1)\n",
        "\n",
        "def create_masking (mask_last, max_len):\n",
        "  masking = []\n",
        "  for i in range(len(mask_last)):\n",
        "    x_mask = torch.ones(max_len)\n",
        "    y_mask = torch.ones(max_len)\n",
        "    x_mask[mask_last[i]:] = 0\n",
        "    y_mask[mask_last[i]:] = 0\n",
        "    masking.append(np.hstack((x_mask,y_mask)))\n",
        "  return masking"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_label_2 = padding_masking(simulation_continued_train)\n",
        "valid_label_2 = padding_masking(simulation_continued_valid)\n",
        "test_label_2 = padding_masking(simulation_continued_test)"
      ],
      "metadata": {
        "id": "z4pFHi_3gIvn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 322
        },
        "outputId": "5cd49aed-8901-49a2-f9c3-f732d2a21b24"
      },
      "id": "z4pFHi_3gIvn",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-53-951dd6dc91c9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtrain_label_2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpadding_masking\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msimulation_continued_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mvalid_label_2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpadding_masking\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msimulation_continued_valid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtest_label_2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpadding_masking\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msimulation_continued_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-52-61996934ef3b>\u001b[0m in \u001b[0;36mpadding_masking\u001b[0;34m(dataset)\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mmask_last\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m       \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m       \u001b[0mx_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: 'int' object is not callable"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Since test length is 118, here add two zeros\n",
        "#pad = nn.ZeroPad2d(padding=(0,2,0,0))\n",
        "#test_label_2 = pad(test_label_2)"
      ],
      "metadata": {
        "id": "O5zOFVT70gLV"
      },
      "id": "O5zOFVT70gLV",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Dataset_2(Dataset):\n",
        "    def __init__(self, data, targets):\n",
        "        self.data = torch.tensor(data).float()\n",
        "        self.targets = torch.tensor(targets).float()\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.data)\n",
        "        \n",
        "    def __getitem__(self, index):  # get the label and data by index\n",
        "        x = self.data[index]\n",
        "        y = self.targets[index]\n",
        "        return x, y\n",
        "        \n",
        "train_dataset_2 = Dataset_2(train_feature_2, train_label_2)\n",
        "valid_dataset_2 = Dataset_2(valid_feature_2, valid_label_2)\n",
        "test_dataset_2 = Dataset_2(test_feature_2, test_label_2)"
      ],
      "metadata": {
        "id": "u_vr-YSvge39"
      },
      "id": "u_vr-YSvge39",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "id": "867aabb3",
      "metadata": {
        "id": "867aabb3"
      },
      "source": [
        "## Model Implementation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "36fe2739",
      "metadata": {
        "id": "36fe2739"
      },
      "outputs": [],
      "source": [
        "#todo\n",
        "import torch\n",
        "from torch import nn\n",
        "import torch.nn.functional as F\n",
        "from torch.autograd import Variable\n",
        "Batchsize_2 = 50\n",
        "input_dim_2=2\n",
        "hidden_dim_2= 256\n",
        "n_layers_2= 2\n",
        "output_dim_2= 120 \n",
        "drop_prob_2=0.5\n",
        "lr_2=0.001\n",
        "num_epochs_2 = 200\n",
        "\n",
        "if torch.cuda.is_available():\n",
        "    device = torch.device('cuda')\n",
        "else:\n",
        "    device=torch.device('cpu')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f80b1ca2",
      "metadata": {
        "id": "f80b1ca2"
      },
      "outputs": [],
      "source": [
        "class RNNTrajectoryPrediction(nn.Module):\n",
        "    \n",
        "    def __init__(self, n_input=input_dim_2, n_hidden=hidden_dim_2, num_layers=n_layers_2, n_output=output_dim_2, drop_prob=drop_prob_2, lr = lr_2):\n",
        "        super(RNNTrajectoryPrediction, self).__init__()\n",
        "        \n",
        "        self.num_layers = num_layers\n",
        "        self.n_hidden = n_hidden\n",
        "        self.drop_prob = drop_prob\n",
        "        self.n_input = n_input\n",
        "        \n",
        "        self.lstm = nn.LSTM(input_size=n_input, hidden_size=n_hidden, num_layers=num_layers, dropout=self.drop_prob, batch_first=True)\n",
        "        self.fc1 = nn.Linear(n_hidden, n_hidden) \n",
        "        self.fc2 = nn.Linear(n_hidden, n_output)\n",
        "        self.drop = nn.Dropout(drop_prob)\n",
        "        #self.lstm = nn.LSTM(input_size=n_input, hidden_size=n_output, num_layers=num_layers, dropout=self.drop_prob, batch_first=True)\n",
        "        #self.lstm2 = nn.LSTM(input_size=n_input, hidden_size=n_output, num_layers=num_layers, dropout=self.drop_prob, batch_first=True)\n",
        "    def forward(self, x):\n",
        "        # Set initial hidden and cell states \n",
        "        # By default,PyTorch's LSTM initiates hidden state and cell state of zeros\n",
        "        # x.shape == (100, 220)      \n",
        "        # Forward propagate LSTM  \n",
        "        out, _ = self.lstm(x) \n",
        "        \n",
        "        # retrieve final hidden output of last timestep for each sequence\n",
        "        # shape [batch_size, hidden_dim]\n",
        "        last_timestep = out[:,-1]\n",
        "        #apply dropout\n",
        "        last_timestep = self.drop(last_timestep)\n",
        "        \n",
        "        h = self.drop(self.fc1(last_timestep))\n",
        "        \n",
        "        h = nn.ReLU()(h)\n",
        "      \n",
        "        y_pred = self.fc2(last_timestep)\n",
        "        \n",
        "        #out = self.drop(out[:,-1])\n",
        "        # Decode the hidden state of the last time step\n",
        "        # shape [batch_size, num_classes]\n",
        "        \n",
        "        return y_pred\n",
        "        "
      ]
    },
    {
      "cell_type": "markdown",
      "id": "826fae3f",
      "metadata": {
        "id": "826fae3f"
      },
      "source": [
        "## Model Training"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "db3fce95",
      "metadata": {
        "id": "db3fce95"
      },
      "outputs": [],
      "source": [
        "#todo"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def train_2(model, num_epochs, loss_fuc, Batchsize):\n",
        "    \"\"\"\n",
        "    Train the model.\n",
        "    \"\"\"\n",
        "    train_losses = []\n",
        "    val_losses = []\n",
        "    train_pred = []\n",
        "    valid_pred = []\n",
        "    for epoch in range(num_epochs):\n",
        "        train_loader_2 = data_loader(train_dataset_2, Batchsize_2, shuffle=True)\n",
        "        valid_loader_2 = data_loader(valid_dataset_2, Batchsize_2, shuffle=True)\n",
        "        model.train()\n",
        "        running_loss = 0.0\n",
        "        print(\"Starting epoch \" + str(epoch+1))\n",
        "        for (features, labels) in train_loader_2:\n",
        "            # Forward\n",
        "            features = features.to(device)\n",
        "            maskings = labels[:,1].to(device)\n",
        "            length_label = []\n",
        "            for mask in maskings:\n",
        "              index = len(mask)-1\n",
        "              while mask[index] == 0:\n",
        "                index -= 1 \n",
        "              length_label.append(index+1)\n",
        "            length_label = torch.tensor(length_label)\n",
        "            #print(length_label.shape)\n",
        "            labels =labels[:,0].reshape(50,2,60).transpose(dim0=1, dim1=2).float().to(device) \n",
        "            pred = model(features) \n",
        "            mask_pred = pred*maskings\n",
        "            loss = loss_fuc(mask_pred.reshape(50,2,60).transpose(dim0=1, dim1=2).float(), labels, length_label)\n",
        "            if epoch == num_epochs-1:\n",
        "              reshape_preds = train_reshape_pred(mask_pred)\n",
        "              for pred in reshape_preds:\n",
        "                train_pred.append(pred)\n",
        "            # Backward and optimize\n",
        "            optimizer_2.zero_grad()\n",
        "            loss.backward()\n",
        "            torch.nn.utils.clip_grad_norm_(model.parameters(), 0.1)\n",
        "            optimizer_2.step()\n",
        "            running_loss += loss.item()\n",
        "            #train_count += labels.size(0)\n",
        "        avg_train_loss = running_loss / len(train_loader_2)\n",
        "        train_losses.append(avg_train_loss)\n",
        "\n",
        "        val_running_loss = 0.0\n",
        "        #val_count = 0\n",
        "        # check validation loss after every epoch\n",
        "        with torch.no_grad():\n",
        "            model.eval()\n",
        "            for (features, labels) in valid_loader_2:\n",
        "                features = features.to(device)\n",
        "                maskings = labels[:,1].to(device)\n",
        "                length_label = []\n",
        "                for mask in maskings:\n",
        "                  index = len(mask)-1\n",
        "                  while mask[index] == 0:\n",
        "                    index -= 1 \n",
        "                  length_label.append(index+1)\n",
        "                length_label = torch.tensor(length_label)\n",
        "                labels =labels[:,0].reshape(50,2,60).transpose(dim0=1, dim1=2).float().to(device) \n",
        "                pred = model(features) \n",
        "                mask_pred = pred*maskings\n",
        "                loss = loss_fuc(mask_pred.reshape(50,2,60).transpose(dim0=1, dim1=2).float(), labels, length_label)\n",
        "                if epoch == num_epochs-1:\n",
        "                    reshape_preds = train_reshape_pred(mask_pred)\n",
        "                    for pred in reshape_preds:\n",
        "                      valid_pred.append(pred)\n",
        "                val_running_loss += loss.item()\n",
        "        avg_val_loss = val_running_loss / len(valid_loader_2)\n",
        "        val_losses.append(avg_val_loss)\n",
        "\n",
        "        print('Epoch [{}/{}],Train Loss: {:.4f}, Valid Loss: {:.4f}'\n",
        "              .format(epoch+1, num_epochs, avg_train_loss, avg_val_loss))\n",
        "    print(\"Finished Training\")\n",
        "    return train_pred, valid_pred, train_losses, val_losses\n",
        "\n",
        "def train_reshape_pred(pred): \n",
        "  x_y_pairs = []\n",
        "  for item in pred:\n",
        "    x_y_pairs.append(item.reshape(2, 60).detach().numpy())\n",
        "  \n",
        "  x_y_coor = []\n",
        "  for item in x_y_pairs:\n",
        "    ture_x_y = []\n",
        "    count = len(item[0])-1\n",
        "    while item[0][count]==0:\n",
        "      count -= 1\n",
        "    ture_x_y.append(item[0][:count+1])\n",
        "    ture_x_y.append(item[1][:count+1])\n",
        "    x_y_coor.append(np.transpose(ture_x_y))\n",
        "\n",
        "  return x_y_coor "
      ],
      "metadata": {
        "id": "G4_w9A4ck7__"
      },
      "id": "G4_w9A4ck7__",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def Rectified_MSELoss(pred, labels, length_label):\n",
        "  # pred and labels 50*60*2 or 50*59*2\n",
        "  diff = pred - labels\n",
        "  #print(\"diff\",diff.shape)\n",
        "  squared_diff = diff * diff\n",
        "  #print(\"squared_diff\",squared_diff.shape)\n",
        "  point_squared_diff = squared_diff.sum(dim=2) #50*60\n",
        "  #print(\"point_squared_diff\",point_squared_diff.shape)\n",
        "  each_squared_diff = point_squared_diff.sum(dim=1) # 50\n",
        "\n",
        "  average_each_squared_diff = each_squared_diff / length_label # 50\n",
        "  #print(\"each_squared_diff\",each_squared_diff,each_squared_diff.shape)\n",
        "  #print(\"average\", average_each_squared_diff,average_each_squared_diff.shape)\n",
        "  sse = average_each_squared_diff.mean()\n",
        "  #print(type(sse),sse)\n",
        "  return sse"
      ],
      "metadata": {
        "id": "A6U9SCdSxy2i"
      },
      "id": "A6U9SCdSxy2i",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "41ddb47d",
      "metadata": {
        "id": "41ddb47d"
      },
      "outputs": [],
      "source": [
        "model_2 = RNNTrajectoryPrediction().to(device)\n",
        "optimizer_2 = torch.optim.Adam(model_2.parameters(), lr=lr_2)\n",
        "criterion_2 = Rectified_MSELoss\n",
        "train_pred, valid_pred, train_losses_2, val_losses_2 = train_2(model=model_2,num_epochs=num_epochs_2,loss_fuc = criterion_2,Batchsize=Batchsize_2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4ee069fc",
      "metadata": {
        "id": "4ee069fc"
      },
      "outputs": [],
      "source": [
        "plot_loss(train_loss=train_losses_2,val_loss=val_losses_2,epoche=num_epochs_2)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_idx = np.random.randint(150)\n",
        "plot_example(simulation_train_task32[train_idx], simulation_continued_train[train_idx], train_pred[train_idx])\n",
        "print(f'Index in Train Dataset', train_idx+1)\n",
        "valid_idx = np.random.randint(100)\n",
        "plot_example(simulation_valid[valid_idx], simulation_continued_valid[valid_idx], valid_pred[valid_idx])\n",
        "print(f'Index in Valid Dataset', valid_idx+1)"
      ],
      "metadata": {
        "id": "KivspbZxPFB_"
      },
      "id": "KivspbZxPFB_",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "id": "c87278a2",
      "metadata": {
        "id": "c87278a2"
      },
      "source": [
        "## Evaluation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2cbb6137",
      "metadata": {
        "id": "2cbb6137"
      },
      "outputs": [],
      "source": [
        "#todo"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2cf6f4b7",
      "metadata": {
        "id": "2cf6f4b7"
      },
      "outputs": [],
      "source": [
        "def test_2(model, test_dataset, loss_func, bacthsizse):\n",
        "  test_loader = data_loader(test_dataset, bacthsizse)\n",
        "  test_loss = 0.0\n",
        "  test_masking_loss = 0.0\n",
        "  mask_results = []\n",
        "  #val_count = 0\n",
        "  model.eval()\n",
        "  with torch.no_grad():\n",
        "    for (features, labels) in test_loader:\n",
        "      features = features.to(device)\n",
        "      labels = labels.to(device)\n",
        "      \n",
        "      maskings = labels[:,1].to(device)\n",
        "      length_label = []\n",
        "      for mask in maskings:\n",
        "        index = len(mask)-1\n",
        "        while mask[index] == 0:\n",
        "          index -= 1 \n",
        "        length_label.append(index+1)\n",
        "      length_label = torch.tensor(length_label)\n",
        "      \n",
        "      labels = labels[:,0].reshape(50,2,59).transpose(dim0=1, dim1=2).float().to(device)\n",
        "      pred = model(features)\n",
        "      pred, _ = torch.split(pred, 118, dim=1)\n",
        "      loss = loss_func(pred.reshape(50,2,59).transpose(dim0=1, dim1=2).float(), labels, length_label)\n",
        "      test_loss += loss.item()\n",
        "      mask_pred = pred * maskings\n",
        "      reshape_preds = reshape_pred(mask_pred)\n",
        "      for pred in reshape_preds:\n",
        "        mask_results.append(pred)\n",
        "      mask_loss = loss_func(mask_pred.reshape(50,2,59).transpose(dim0=1, dim1=2).float(), labels, length_label)\n",
        "      test_masking_loss += mask_loss.item()\n",
        "   \n",
        "  avg_test_loss = test_loss / len(test_loader)\n",
        "  avg_test_masking_loss = test_masking_loss / len(test_loader)\n",
        "  print('Test Loss Without Masking: {:.4f}, Test Loss With Masking: {:.4f}'\n",
        "              .format(avg_test_loss, avg_test_masking_loss))\n",
        "  return mask_results\n",
        "\n",
        "def reshape_pred(pred): \n",
        "  #pred, _ = torch.split(pred, 118, dim=1)\n",
        "  x_y_pairs = []\n",
        "  for item in pred:\n",
        "    x_y_pairs.append(item.reshape(2,59).numpy())\n",
        "\n",
        "  x_y_coor = []\n",
        "  for item in x_y_pairs:\n",
        "    ture_x_y = []\n",
        "    count = len(item[0])-1\n",
        "    while item[0][count]==0:\n",
        "      count -= 1\n",
        "    ture_x_y.append(item[0][:count+1])\n",
        "\n",
        "    ture_x_y.append(item[1][:count+1])\n",
        "    x_y_coor.append(np.transpose(ture_x_y))\n",
        "\n",
        "  return x_y_coor "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "736c10d8",
      "metadata": {
        "id": "736c10d8"
      },
      "outputs": [],
      "source": [
        "predictions = test_2(model_2, test_dataset_2, criterion_2, Batchsize_2)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_idx = np.random.randint(100)\n",
        "plot_example(simulation_test[test_idx], simulation_continued_test[test_idx], predictions[test_idx])\n",
        "print(f'Index in Test Dataset', test_idx+1)"
      ],
      "metadata": {
        "id": "jMe_xTsQ8xl1"
      },
      "id": "jMe_xTsQ8xl1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "v = []\n",
        "last_points = []\n",
        "for item in simulation_test:\n",
        "  last_one_point = item[-1]\n",
        "  last_two_point = item[-2]\n",
        "  last_points.append(last_one_point)\n",
        "  v_x = last_one_point[0]-last_two_point[0]\n",
        "  v_y = last_one_point[1]-last_two_point[1]\n",
        "  v.append([v_x, v_y])\n"
      ],
      "metadata": {
        "id": "IlAFlyiHx18q"
      },
      "id": "IlAFlyiHx18q",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "all_length_label = []\n",
        "for item in simulation_continued_test:\n",
        "    all_length_label.append(np.size(item,0))"
      ],
      "metadata": {
        "id": "5A5zZoJKzpT6"
      },
      "id": "5A5zZoJKzpT6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "G3mJKZPU2sjB"
      },
      "id": "G3mJKZPU2sjB",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pred = []\n",
        "for i in range(num_test):\n",
        "  num_step = all_length_label[i]\n",
        "  last_point = last_points[i]\n",
        "  last_v = v[i]\n",
        "  one_pred = []\n",
        "  count = 1\n",
        "  while count <= num_step:\n",
        "    x_pred = last_point[0] + count * last_v[0]\n",
        "    y_pred = last_point[0] + count * last_v[1]\n",
        "    one_pred.append([x_pred, y_pred])\n",
        "    count += 1\n",
        "  pred.append(one_pred)\n",
        "\n"
      ],
      "metadata": {
        "id": "20qGTUBS0pg4"
      },
      "id": "20qGTUBS0pg4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(pred[0][0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ybNhEBde-g57",
        "outputId": "1e262154-379b-48da-e8d9-6198d6dd66ef"
      },
      "id": "ybNhEBde-g57",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[-2.4629561914375695, -2.383746754453175]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "loss = 0\n",
        "for i in range(num_test):\n",
        "  one_pred = pred[i]\n",
        "  one_true = simulation_continued_test[i]\n",
        "  one_loss = 0\n",
        "  for i in range(np.size(one_pred, 0)):\n",
        "    \n",
        "    x_loss = pow((one_pred[i][0]-one_true[i][0]),2)\n",
        "    y_loss = pow((one_pred[i][1]-one_true[i][1]),2)\n",
        "    x_y_loss = x_loss+y_loss\n",
        "    one_loss += x_y_loss\n",
        "  loss += (one_loss/(np.size(one_pred, 0)))\n",
        "loss = loss/num_test\n"
      ],
      "metadata": {
        "id": "A7qSC40p42ZP"
      },
      "id": "A7qSC40p42ZP",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(loss)"
      ],
      "metadata": {
        "id": "UGEEdUiI43mO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7f93e55c-e388-4ffe-e7a9-7b1558b096f9"
      },
      "id": "UGEEdUiI43mO",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10.69299040196317\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3.9.7 ('base')",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.7"
    },
    "vscode": {
      "interpreter": {
        "hash": "270ffb0c874d7e512b44b8bd305fde61df9cabfb71a4d33bb975d4a2141f772c"
      }
    },
    "colab": {
      "name": "a3.ipynb",
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}